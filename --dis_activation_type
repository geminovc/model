Warning:  using Python fallback for SyncBatchNorm, possibly because apex was installed without --cuda_ext.  The exception raised when attempting to import the cuda backend was:  No module named 'syncbn'
Warning:  using Python fallback for SyncBatchNorm, possibly because apex was installed without --cuda_ext.  The exception raised when attempting to import the cuda backend was:  No module named 'syncbn'
Warning:  using Python fallback for SyncBatchNorm, possibly because apex was installed without --cuda_ext.  The exception raised when attempting to import the cuda backend was:  No module named 'syncbn'
Namespace(adam_beta1=0.5, adv_loss_weight=0.5, adv_pred_type='ragan', amp_loss_scale='dynamic', amp_opt_level='O0', batch_size=40, bn_momentum=1.0, calc_stats=True, checkpoint_freq=25, csm_model='insight_face', data_root='insert', dataloader_name='voxceleb2', dataset_name='voxceleb2_512px', debug=False, dis_activation_type='leakyrelu', dis_downsampling_type='avgpool', dis_fake_imgs_name='pred_target_imgs', dis_max_channels=512, dis_no_stickman=False, dis_norm_layer_type='bn', dis_num_blocks=6, dis_num_channels=64, dis_output_tensor_size=8, emb_activation_type='leakyrelu', emb_apply_masks=True, emb_downsampling_type='avgpool', emb_max_channels=512, emb_no_stickman=False, emb_norm_layer_type='none', emb_num_channels=64, emb_output_tensor_size=8, eps=1e-07, experiment_name='test_experiment', fem_loss_type='l1', fem_loss_weight=10.0, image_size=256, inf_activation_type='leakyrelu', inf_apply_masks=True, inf_calc_grad=False, inf_input_tensor_size=4, inf_max_channels=256, inf_norm_layer_type='ada_bn', inf_num_channels=32, inf_pred_segmentation=True, inf_pred_source_data=False, inf_skip_layer_type='ada_conv', inf_upsampling_type='nearest', init_experiment_dir='', init_networks='', init_which_epoch='none', local_rank=0, losses_test='lpips, csim', losses_train='adversarial, feature_matching, perceptual, pixelwise, segmentation, warping_regularizer', lps_calc_grad=False, lps_model='net-lin', lps_net='vgg', lrs='identity_embedder: 2e-4, texture_generator: 2e-4, keypoints_embedder: 2e-4, inference_generator: 2e-4, discriminator: 2e-4', networks_calc_stats='identity_embedder, texture_generator, keypoints_embedder, inference_generator', networks_test='identity_embedder, texture_generator, keypoints_embedder, inference_generator', networks_to_train='identity_embedder, texture_generator, keypoints_embedder, inference_generator, discriminator', networks_train='identity_embedder, texture_generator, keypoints_embedder, inference_generator, discriminator', no_disk_write_ops=False, num_epochs=4000, num_gpus=1, num_keypoints=68, num_source_frames=1, num_target_frames=1, num_visuals=32, num_workers_per_process=20, optims='identity_embedder: adam, texture_generator: adam, keypoints_embedder: adam, inference_generator: adam, discriminator: adam', output_segmentation=True, output_stickmen=True, per_full_net_names='vgg19_imagenet_pytorch, vgg16_face_caffe', per_layer_weights='0.03125, 0.0625, 0.125, 0.25, 1.0', per_loss_apply_to='pred_target_imgs_lf_detached, target_imgs', per_loss_names='VGG19, VGGFace', per_loss_type='l1', per_loss_weights='10.0, 0.01', per_net_layers='1,6,11,20,29; 1,6,11,18,25', per_pooling='avgpool', pix_loss_apply_to='pred_target_delta_lf_rgbs, target_imgs', pix_loss_names='L1', pix_loss_type='l1', pix_loss_weights='10.0', project_dir='.', pse_activation_type='leakyrelu', pse_emb_source_pose=True, pse_in_channels=136, pse_norm_layer_type='none', pse_num_blocks=4, pse_num_channels=256, pse_num_harmonics=4, pse_use_harmonic_enc=True, random_seed=0, rank=0, redirect_print_to_file=False, runner_name='default', seg_loss_apply_to='pred_target_segs_logits, target_segs', seg_loss_names='BCE', seg_loss_type='bce', seg_loss_weights=10.0, skip_test=False, spn_exceptions='', spn_layers='conv2d, linear', spn_networks='identity_embedder, texture_generator, keypoints_embedder, inference_generator, discriminator', stats_calc_iters=500, stickmen_thickness=2, test_freq=5, tex_activation_type='leakyrelu', tex_input_tensor_size=4, tex_max_channels=512, tex_norm_layer_type='ada_spade_bn', tex_num_channels=64, tex_pixelwise_bias_type='none', tex_skip_layer_type='ada_conv', tex_upsampling_type='nearest', torch_home='', train_size=1, use_apex=False, use_closure=False, use_half=False, visual_freq=-1, wgv_mode='none', wgv_momentum=0.999, which_epoch='none', world_size=1, wpr_loss_apply_to='pred_target_delta_uvs', wpr_loss_decay_schedule=-1, wpr_loss_type='l1', wpr_loss_weight=0.0, wpr_loss_weight_decay=1.0)
RunnerWrapper(
  (nets): ModuleDict(
    (discriminator): Discriminator(
      (first_conv): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (blocks): ModuleList(
        (0): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(64, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): BatchNorm2d(128, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (1): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(128, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (2): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (3): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (4): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (5): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Identity()
        )
      )
      (final_block): Sequential(
        (0): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (linear): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    Number of parameters: 19517633
    (identity_embedder): Embedder(
      (enc): Sequential(
        (0): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (2): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (3): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (4): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
        (5): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (skip): Sequential(
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
        )
      )
      (dec_blocks): ModuleList(
        (0): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Identity()
        )
        (1): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Identity()
        )
        (2): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Identity()
        )
        (3): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (4): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (5): ResBlock(
          (block_feats): Sequential(
            (0): LeakyReLU(negative_slope=0.2)
            (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
    )
    Number of parameters: 31442304
    (inference_generator): Projector(
      (avgpools): ModuleList(
        (0): AdaptiveAvgPool2d(output_size=(16, 16))
        (1): AdaptiveAvgPool2d(output_size=(16, 16))
        (2): AdaptiveAvgPool2d(output_size=(16, 16))
        (3): AdaptiveAvgPool2d(output_size=(16, 16))
        (4): AdaptiveAvgPool2d(output_size=(16, 16))
        (5): AdaptiveAvgPool2d(output_size=(16, 16))
      )
      (fc_blocks): ModuleList(
        (0): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
        )
        (3): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=512, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=2, bias=True)
          )
        )
        (4): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=512, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=2, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=512, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=129, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=512, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=2, bias=True)
          )
        )
        (5): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=512, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=2, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=512, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=65, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=512, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=2, bias=True)
          )
        )
      )
    )
    Number of parameters: 7720286
    Generator(
      (blocks): Sequential(
        (0): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(256, 256, kernel_size=1, stride=1, padding=1)
          )
        )
        (1): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(256, 256, kernel_size=1, stride=1, padding=1)
          )
        )
        (2): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(256, 256, kernel_size=1, stride=1, padding=1)
          )
        )
        (3): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(128, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(256, 128, kernel_size=1, stride=1, padding=1)
          )
        )
        (4): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(128, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(64, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(128, 64, kernel_size=1, stride=1, padding=1)
          )
        )
        (5): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(64, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): AdaptiveNorm2d(
              (norm_layer): BatchNorm2d(32, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (4): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(64, 32, kernel_size=1, stride=1, padding=1)
          )
        )
        (6): AdaptiveNorm2d(
          (norm_layer): BatchNorm2d(32, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
        )
        (7): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (heads): ModuleList(
        (0): Sequential(
          (0): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): Tanh()
        )
        (1): Sequential(
          (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): Tanh()
        )
        (2): Sequential(
          (0): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
    )
    Number of parameters: 4123782
    (keypoints_embedder): PoseEmbedder(
      (mlp): Sequential(
        (0): Linear(in_features=1088, out_features=256, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=256, out_features=256, bias=True)
        (5): LeakyReLU(negative_slope=0.2, inplace=True)
        (6): Linear(in_features=256, out_features=4096, bias=True)
      )
    )
    Number of parameters: 1463040
    (texture_generator): Projector(
      (avgpools): ModuleList(
        (0): AdaptiveAvgPool2d(output_size=(32, 32))
        (1): AdaptiveAvgPool2d(output_size=(32, 32))
        (2): AdaptiveAvgPool2d(output_size=(32, 32))
        (3): AdaptiveAvgPool2d(output_size=(32, 32))
        (4): AdaptiveAvgPool2d(output_size=(32, 32))
        (5): AdaptiveAvgPool2d(output_size=(32, 32))
      )
      (fc_blocks): ModuleList(
        (0): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
        )
        (2): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
        )
        (3): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=513, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=1024, out_features=512, bias=True)
            (1): Linear(in_features=512, out_features=512, bias=True)
            (2): Linear(in_features=512, out_features=257, bias=True)
          )
        )
        (4): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=1024, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=129, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=1024, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=129, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=1024, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=257, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=1024, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=129, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=1024, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=129, bias=True)
          )
        )
        (5): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=1024, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=65, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=1024, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=65, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=1024, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=129, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=1024, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=65, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=1024, out_features=128, bias=True)
            (1): Linear(in_features=128, out_features=128, bias=True)
            (2): Linear(in_features=128, out_features=65, bias=True)
          )
        )
      )
    )
    Number of parameters: 23115550
    Generator(
      (blocks): Sequential(
        (0): ResBlock(
          (block_feats): Sequential(
            (0): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=True, track_running_stats=True)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (5): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(512, 512, kernel_size=1, stride=1, padding=1)
          )
        )
        (1): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (5): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(512, 512, kernel_size=1, stride=1, padding=1)
          )
        )
        (2): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (5): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(512, 512, kernel_size=1, stride=1, padding=1)
          )
        )
        (3): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(512, 512, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(512, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
            (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(256, 256, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(256, 256, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (5): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(512, 256, kernel_size=1, stride=1, padding=1)
          )
        )
        (4): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(256, 256, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(256, 256, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(256, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
            (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(128, 128, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(128, 128, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(128, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (5): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(256, 128, kernel_size=1, stride=1, padding=1)
          )
        )
        (5): ResBlock(
          (block_feats): Sequential(
            (0): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(128, 128, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(128, 128, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(128, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
            (2): Upsample(scale_factor=2.0, mode=nearest)
            (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): AdaptiveNorm2d(
              (conv_weight): AdaptiveConv2d(64, 64, kernel_size=1, stride=1)
              (conv_bias): AdaptiveConv2d(64, 64, kernel_size=1, stride=1)
              (norm_layer): BatchNorm2d(64, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
            )
            (5): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (block): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (skip): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): AdaptiveConv2d(128, 64, kernel_size=1, stride=1, padding=1)
          )
        )
        (6): AdaptiveNorm2d(
          (conv_weight): AdaptiveConv2d(64, 64, kernel_size=1, stride=1)
          (conv_bias): AdaptiveConv2d(64, 64, kernel_size=1, stride=1)
          (norm_layer): BatchNorm2d(64, eps=1e-07, momentum=1.0, affine=False, track_running_stats=True)
        )
        (7): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (heads): ModuleList(
        (0): Sequential(
          (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): Tanh()
        )
      )
    )
    Number of parameters: 32541251
  )
  (losses): ModuleDict(
    (adversarial): LossWrapper()
    (csim): (cdist): LossWrapper()
    (feature_matching): LossWrapper()
    (lpips): LossWrapper(
      (loss): PerceptualLoss()
    )
    (perceptual): LossWrapper(
      (nets): ModuleList(
        (0): ModuleList(
          (0): Sequential(
            (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): ReLU(inplace=True)
          )
          (2): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): ReLU(inplace=True)
          )
          (3): Sequential(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
            (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (5): ReLU(inplace=True)
            (6): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (7): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (8): ReLU(inplace=True)
          )
          (4): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
            (4): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (5): ReLU(inplace=True)
            (6): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (7): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (8): ReLU(inplace=True)
          )
        )
        (1): ModuleList(
          (0): Sequential(
            (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): ReLU(inplace=True)
          )
          (2): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): ReLU(inplace=True)
          )
          (3): Sequential(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
            (4): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (5): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): ReLU(inplace=True)
          )
          (4): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): ReLU(inplace=True)
            (4): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): ReLU(inplace=True)
          )
        )
      )
    )
    (pixelwise): LossWrapper()
    (segmentation): LossWrapper()
    (warping_regularizer): LossWrapper()
  )
)
epoch 1
epoch 2
epoch 3
epoch 4
epoch 5
